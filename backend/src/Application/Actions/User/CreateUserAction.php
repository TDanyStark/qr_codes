<?php

declare(strict_types=1);

namespace App\Application\Actions\User;

use App\Domain\User\User;
use Psr\Http\Message\ResponseInterface as Response;
use Slim\Exception\HttpBadRequestException;

class CreateUserAction extends UserAction
{
    /**
     * {@inheritdoc}
     */
    protected function action(): Response
    {
        $input = $this->getFormData();
        
        // Validate required fields
        if (empty($input['name'])) {
            throw new HttpBadRequestException($this->request, 'El nombre es requerido');
        }
        
        if (empty($input['email'])) {
            throw new HttpBadRequestException($this->request, 'El email es requerido');
        }
        
        if (!filter_var($input['email'], FILTER_VALIDATE_EMAIL)) {
            throw new HttpBadRequestException($this->request, 'El email no tiene un formato vÃ¡lido');
        }
        
        // Validate rol
        $rol = $input['rol'] ?? 'user';
        if (!in_array($rol, ['user', 'admin'])) {
            throw new HttpBadRequestException($this->request, 'El rol debe ser "user" o "admin"');
        }
        
        // Check if email already exists
        try {
            $this->userRepository->findByEmail($input['email']);
            throw new HttpBadRequestException($this->request, 'Ya existe un usuario con este email');
        } catch (\App\Domain\User\UserNotFoundException $e) {
            // Email doesn't exist, which is what we want
        }
        
        // Create new user
        $newUser = new User(
            null, // ID will be generated by the repository
            $input['name'],
            $input['email'],
            $rol
        );
        
        $createdUser = $this->userRepository->create($newUser);
        
        $this->logger->info('User created', ['id' => $createdUser->getId(), 'email' => $createdUser->getEmail()]);
        
        return $this->respondWithData($createdUser, 201);
    }
}